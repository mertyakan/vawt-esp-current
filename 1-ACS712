#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>


// Wi-Fi Ayarları
const char* ssid = "WIFI";  // Wi-Fi ağ adınızı yazın
const char* password = "WIFI"; // Wi-Fi şifrenizi yazın

const int currentSensorPin = A0;
float calibrationValue = 66.0; 
float offset = 0;

ESP8266WebServer server(80);

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Wi-Fi'ye bağlanılıyor...");
  }
  Serial.println("Wi-Fi bağlantısı tamamlandı.");
  Serial.print("IP Adresi: ");
  Serial.println(WiFi.localIP());

  // Kalibrasyon
  offset = 0;
  for (int i = 0; i < 500; i++) {
    offset += analogRead(currentSensorPin);
    delay(10);
  }
  offset /= 500.0;

  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.begin();
}

void loop() {
  server.handleClient();
}

void handleRoot() {
  String html = "<!DOCTYPE html>\
  <html>\
  <head>\
    <meta charset='UTF-8'>\
    <title>Akım Sensörü Grafiği</title>\
    <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>\
  </head>\
  <body>\
    <h1>ACS712 Akım Sensörü</h1>\
    <canvas id='currentChart' width='400' height='200'></canvas>\
    <script>\
      const ctx = document.getElementById('currentChart').getContext('2d');\
      const currentChart = new Chart(ctx, {\
        type: 'line',\
        data: {\
          labels: [],\
          datasets: [{\
            label: 'Akım (A)',\
            data: [],\
            borderColor: 'rgba(75, 192, 192, 1)',\
            borderWidth: 2,\
            fill: false\
          }]\
        },\
        options: {\
          scales: {\
            x: { title: { display: true, text: 'Zaman' } },\
            y: { title: { display: true, text: 'Akım (A)' } }\
          }\
        }\
      });\
      function fetchData() {\
        fetch('/data')\
          .then(response => response.json())\
          .then(data => {\
            const now = new Date().toLocaleTimeString();\
            currentChart.data.labels.push(now);\
            currentChart.data.datasets[0].data.push(data.current);\
            if (currentChart.data.labels.length > 100) {\
              currentChart.data.labels.shift();\
              currentChart.data.datasets[0].data.shift();\
            }\
            currentChart.update();\
          });\
      }\
      setInterval(fetchData, 1000);\
    </script>\
  </body>\
  </html>";
  server.send(200, "text/html", html);
}

void handleData() {
  float current = readCurrent();
  String json = "{\"current\":" + String(current, 2) + "}";
  server.send(200, "application/json", json);
}

float readCurrent() {
  static float currentSmoothed = 0.0;
  int sensorValue = analogRead(currentSensorPin);
  float voltage = ((sensorValue - offset) / 1023.0) * 3.3;
  float current = voltage / (calibrationValue / 1000.0);
  currentSmoothed = (currentSmoothed * 0.8) + (current * 0.2); 
  return currentSmoothed;
}
